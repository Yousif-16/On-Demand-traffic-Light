
On Demand Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143f  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000986  00000000  00000000  00002017  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d37  00000000  00000000  0000299d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000036d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae6  00000000  00000000  00003ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000049df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  74:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
uint8 flag_green=0;
uint8 flag_yellow=0;
uint8 counter=0;
uint8 flag_main=0;
ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	if (flag_red==1)
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flag_red>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	d1 f4       	brne	.+52     	; 0xda <__vector_1+0x5e>
	{
		Turn_Led_On(LED_PORTB,0);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		Turn_Led_Off(LED_PORTB, Led_Pin1);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTB, Led_Pin2);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Set_Delay(84);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	88 ea       	ldi	r24, 0xA8	; 168
  c2:	92 e4       	ldi	r25, 0x42	; 66
  c4:	0e 94 ca 01 	call	0x394	; 0x394 <Set_Delay>
		Turn_Led_Off(LED_PORTB, Led_Pin0);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTA, Led_Pin2);
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
  d8:	5a c0       	rjmp	.+180    	; 0x18e <__vector_1+0x112>


	}
	else if (flag_yellow==1||flag_green==1)
  da:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag_yellow>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	29 f0       	breq	.+10     	; 0xec <__vector_1+0x70>
  e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag_green>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <__vector_1+0x70>
  ea:	51 c0       	rjmp	.+162    	; 0x18e <__vector_1+0x112>
	{
		/***********************************/ 
		Turn_Led_On(LED_PORTB, Led_Pin2);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		Turn_Led_Off(LED_PORTB, Led_Pin0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		/***********************************/
		/***********************************/ 
		Turn_Led_On(LED_PORTB,2);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		Turn_Led_Off(LED_PORTA, Led_Pin0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTA, Led_Pin2);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTA, Led_Pin1);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>

		/***********************************/
		for(counter=10;counter>1;counter--)
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	13 c0       	rjmp	.+38     	; 0x14a <__vector_1+0xce>
		{
			Toggle_Led(LED_PORTA,Led_Pin1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 c2 01 	call	0x384	; 0x384 <Toggle_Led>
			Toggle_Led(LED_PORTB,Led_Pin1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 c2 01 	call	0x384	; 0x384 <Toggle_Led>
		
			Set_Delay(25);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	88 ec       	ldi	r24, 0xC8	; 200
 13a:	91 e4       	ldi	r25, 0x41	; 65
 13c:	0e 94 ca 01 	call	0x394	; 0x394 <Set_Delay>
		Turn_Led_Off(LED_PORTA, Led_Pin0);
		Turn_Led_Off(LED_PORTA, Led_Pin2);
		Turn_Led_Off(LED_PORTA, Led_Pin1);

		/***********************************/
		for(counter=10;counter>1;counter--)
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	81 50       	subi	r24, 0x01	; 1
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	48 f7       	brcc	.-46     	; 0x124 <__vector_1+0xa8>
			Toggle_Led(LED_PORTB,Led_Pin1);
		
			Set_Delay(25);
		}
		
		Turn_Led_Off(LED_PORTB, Led_Pin1);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTB, Led_Pin2);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		Turn_Led_Off(LED_PORTA, Led_Pin1);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>

		Turn_Led_On(LED_PORTB,0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		Turn_Led_On(LED_PORTA,2);
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>


		Set_Delay(84);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	88 ea       	ldi	r24, 0xA8	; 168
 180:	92 e4       	ldi	r25, 0x42	; 66
 182:	0e 94 ca 01 	call	0x394	; 0x394 <Set_Delay>

		Turn_Led_Off(LED_PORTB,0);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>


	}
	flag_red=0;
 18e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag_red>
	flag_yellow=0;
 192:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag_yellow>
	flag_green=0;
 196:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag_green>
sei();
 19a:	78 94       	sei
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <app_start>:

void app_start()
{
	
	Led_Init(LED_PORTA,Led_Pin0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>
	Led_Init(LED_PORTA,Led_Pin1);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>
	Led_Init(LED_PORTA,Led_Pin2);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>
	Led_Init(LED_PORTB,Led_Pin0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>
	Led_Init(LED_PORTB,Led_Pin1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>
	Led_Init(LED_PORTB,Led_Pin2);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Led_Init>

	Turn_Led_Off(LED_PORTA, Led_Pin0);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	Turn_Led_Off(LED_PORTA, Led_Pin1);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	Turn_Led_Off(LED_PORTA, Led_Pin2);
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	Turn_Led_Off(LED_PORTB, Led_Pin0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	Turn_Led_Off(LED_PORTB, Led_Pin1);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	Turn_Led_Off(LED_PORTB, Led_Pin2);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
	/*******************************************/
	Init_Button(Button_PORTD,2);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Init_Button>
	/*******************************************/
	//Init_Int0 (TIMER0_NORMAL_MODE, TIMER0_PreSCALER_1 );
	Init_interrupt(Int0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 77 03 	call	0x6ee	; 0x6ee <Init_interrupt>
	SREG|=(1<<7);
 22c:	8f b7       	in	r24, 0x3f	; 63
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	8f bf       	out	0x3f, r24	; 63
	MCUCR|=(1<<0)|(1<<1);
 232:	85 b7       	in	r24, 0x35	; 53
 234:	83 60       	ori	r24, 0x03	; 3
 236:	85 bf       	out	0x35, r24	; 53
	/*******************************************/
	
	while (1)
	{

		Turn_Led_On(LED_PORTA, Led_Pin0); // car_green
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		flag_green=1;
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <flag_green>
		
		Set_Delay_Timer2(5);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 ea       	ldi	r24, 0xA0	; 160
 24c:	90 e4       	ldi	r25, 0x40	; 64
 24e:	0e 94 0d 02 	call	0x41a	; 0x41a <Set_Delay_Timer2>

		Turn_Led_Off(LED_PORTA, Led_Pin0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		flag_green=0;
 25a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag_green>

		Turn_Led_On(LED_PORTA, Led_Pin1); // car_yellow
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		flag_yellow=1;
 266:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <flag_yellow>
		
		Set_Delay_Timer2(84);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	88 ea       	ldi	r24, 0xA8	; 168
 270:	92 e4       	ldi	r25, 0x42	; 66
 272:	0e 94 0d 02 	call	0x41a	; 0x41a <Set_Delay_Timer2>

		Turn_Led_Off(LED_PORTA, Led_Pin1);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		flag_yellow=0;
 27e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag_yellow>

		Turn_Led_On(LED_PORTA, Led_Pin2); // car_red
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Turn_Led_On>
		flag_red=1;
 28a:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <flag_red>
		
		Set_Delay_Timer2(84);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	88 ea       	ldi	r24, 0xA8	; 168
 294:	92 e4       	ldi	r25, 0x42	; 66
 296:	0e 94 0d 02 	call	0x41a	; 0x41a <Set_Delay_Timer2>

		Turn_Led_Off(LED_PORTA, Led_Pin2);
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 98 01 	call	0x330	; 0x330 <Turn_Led_Off>
		flag_red=0;
 2a2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag_red>
 2a6:	c8 cf       	rjmp	.-112    	; 0x238 <app_start+0x7a>

000002a8 <Init_Button>:


uint8 Init_Button (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_val=Success_Button;
	if(Port_num>3||Pin_num>7)
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	38 f4       	brcc	.+14     	; 0x2ba <Init_Button+0x12>
 2ac:	68 30       	cpi	r22, 0x08	; 8
 2ae:	38 f4       	brcc	.+14     	; 0x2be <Init_Button+0x16>
	{
		ret_val=Error_Button;
	}
	else
	{
		GPIO_InitPin(Port_num, Pin_num,INPUT);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <GPIO_InitPin>
#include "Button.h"


uint8 Init_Button (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_val=Success_Button;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
	if(Port_num>3||Pin_num>7)
	{
		ret_val=Error_Button;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret
 2be:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		GPIO_InitPin(Port_num, Pin_num,INPUT);
	}
	return ret_val;
}
 2c0:	08 95       	ret

000002c2 <Led_Init>:
#include "led.h"
uint8 Led_Init (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
		if (Pin_num>7||Port_num>3)
 2c2:	68 30       	cpi	r22, 0x08	; 8
 2c4:	38 f4       	brcc	.+14     	; 0x2d4 <Led_Init+0x12>
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	38 f4       	brcc	.+14     	; 0x2d8 <Led_Init+0x16>
		{
			return Error_Led;
		}
		else
		{
			GPIO_InitPin(Port_num,Pin_num,LED_OUTPUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <GPIO_InitPin>
		}
		return ret_value;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
uint8 Led_Init (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
		if (Pin_num>7||Port_num>3)
		{
			return Error_Led;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
 2d8:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			GPIO_InitPin(Port_num,Pin_num,LED_OUTPUT);
		}
		return ret_value;
}
 2da:	08 95       	ret

000002dc <Turn_Led_On>:

uint8 Turn_Led_On (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
	if (Pin_num>7||Port_num>3)
 2dc:	68 30       	cpi	r22, 0x08	; 8
 2de:	10 f5       	brcc	.+68     	; 0x324 <Turn_Led_On+0x48>
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	10 f5       	brcc	.+68     	; 0x328 <Turn_Led_On+0x4c>
	{
		return Error_Led;
	}
	else
	{
		switch (Port_num)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	61 f0       	breq	.+24     	; 0x300 <Turn_Led_On+0x24>
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <Turn_Led_On+0x18>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	79 f0       	breq	.+30     	; 0x30c <Turn_Led_On+0x30>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	99 f0       	breq	.+38     	; 0x318 <Turn_Led_On+0x3c>
 2f2:	1c c0       	rjmp	.+56     	; 0x32c <Turn_Led_On+0x50>
		{
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_HIGH);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
			break;

		}
	}
	return ret_value;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (Port_num)
		{
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_HIGH);
			break;
 2fe:	08 95       	ret
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_HIGH);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
			break;

		}
	}
	return ret_value;
 308:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_HIGH);
			break;
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_HIGH);
			break;
 30a:	08 95       	ret
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_HIGH);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
			break;

		}
	}
	return ret_value;
 314:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_HIGH);
			break;
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_HIGH);
			break;
 316:	08 95       	ret
		case LED_PORTD:
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			break;

		}
	}
	return ret_value;
 320:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_HIGH);
			break;
		case LED_PORTD:
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
			break;
 322:	08 95       	ret
uint8 Turn_Led_On (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
	if (Pin_num>7||Port_num>3)
	{
		return Error_Led;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
			GPIO_WritePin(LED_PORTD,Pin_num,LED_HIGH);
			break;

		}
	}
	return ret_value;
 32c:	81 e0       	ldi	r24, 0x01	; 1

}
 32e:	08 95       	ret

00000330 <Turn_Led_Off>:


uint8 Turn_Led_Off (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
	if (Pin_num>7||Port_num>3)
 330:	68 30       	cpi	r22, 0x08	; 8
 332:	10 f5       	brcc	.+68     	; 0x378 <Turn_Led_Off+0x48>
 334:	84 30       	cpi	r24, 0x04	; 4
 336:	10 f5       	brcc	.+68     	; 0x37c <Turn_Led_Off+0x4c>
	{
		return Error_Led;
	}
	else
	{
		switch (Port_num)
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	61 f0       	breq	.+24     	; 0x354 <Turn_Led_Off+0x24>
 33c:	28 f0       	brcs	.+10     	; 0x348 <Turn_Led_Off+0x18>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	79 f0       	breq	.+30     	; 0x360 <Turn_Led_Off+0x30>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	99 f0       	breq	.+38     	; 0x36c <Turn_Led_Off+0x3c>
 346:	1c c0       	rjmp	.+56     	; 0x380 <Turn_Led_Off+0x50>
		{
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
			break;

		}
	}
	return ret_value;
 350:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (Port_num)
		{
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_LOW);
			break;
 352:	08 95       	ret
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_LOW);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
			break;

		}
	}
	return ret_value;
 35c:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTA:
			GPIO_WritePin(LED_PORTA,Pin_num,LED_LOW);
			break;
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_LOW);
			break;
 35e:	08 95       	ret
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_LOW);
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
			break;

		}
	}
	return ret_value;
 368:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTB:
			GPIO_WritePin(LED_PORTB,Pin_num,LED_LOW);
			break;
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_LOW);
			break;
 36a:	08 95       	ret
		case LED_PORTD:
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_WritePin>
			break;

		}
	}
	return ret_value;
 374:	81 e0       	ldi	r24, 0x01	; 1
		case LED_PORTC:
			GPIO_WritePin(LED_PORTC,Pin_num,LED_LOW);
			break;
		case LED_PORTD:
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
			break;
 376:	08 95       	ret
uint8 Turn_Led_Off (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_value =Success_Led ;
	if (Pin_num>7||Port_num>3)
	{
		return Error_Led;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
			GPIO_WritePin(LED_PORTD,Pin_num,LED_LOW);
			break;

		}
	}
	return ret_value;
 380:	81 e0       	ldi	r24, 0x01	; 1

}
 382:	08 95       	ret

00000384 <Toggle_Led>:

uint8 Toggle_Led (uint8 Port_num,uint8 Pin_num)
{
	uint8 ret_val;
	if(Port_num>3||Pin_num>7)
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	20 f4       	brcc	.+8      	; 0x390 <Toggle_Led+0xc>
 388:	68 30       	cpi	r22, 0x08	; 8
 38a:	10 f4       	brcc	.+4      	; 0x390 <Toggle_Led+0xc>
	{
		ret_val=Error_Led;
	}
	else
	{
		GPIO_TogglePin(Port_num,Pin_num);
 38c:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_TogglePin>
	}
	return ret_val;
}
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

00000394 <Set_Delay>:

	}
}

void Set_Delay (float SEC)
{
 394:	8f 92       	push	r8
 396:	9f 92       	push	r9
 398:	af 92       	push	r10
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	4b 01       	movw	r8, r22
 3a6:	5c 01       	movw	r10, r24
	float counter;
	SREG|=(1<<7);
 3a8:	8f b7       	in	r24, 0x3f	; 63
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	8f bf       	out	0x3f, r24	; 63
	for (counter=0;counter<(4*SEC);counter++)
 3ae:	c1 2c       	mov	r12, r1
 3b0:	d1 2c       	mov	r13, r1
 3b2:	76 01       	movw	r14, r12
 3b4:	18 c0       	rjmp	.+48     	; 0x3e6 <Set_Delay+0x52>
	{
		TCNT0=0x09;  //initial value 
 3b6:	89 e0       	ldi	r24, 0x09	; 9
 3b8:	82 bf       	out	0x32, r24	; 50
		TIMSK|=(1<<0);  //enable  (module interrupt enable)
 3ba:	89 b7       	in	r24, 0x39	; 57
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	89 bf       	out	0x39, r24	; 57
		TCCR0=(1<<7)|(1<<CS00)|(1<<CS02);
 3c0:	85 e8       	ldi	r24, 0x85	; 133
 3c2:	83 bf       	out	0x33, r24	; 51

		while ((TIFR&(1<<0))==0);
 3c4:	08 b6       	in	r0, 0x38	; 56
 3c6:	00 fe       	sbrs	r0, 0
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <Set_Delay+0x30>
		TIFR|=(1<<0);
 3ca:	88 b7       	in	r24, 0x38	; 56
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	88 bf       	out	0x38, r24	; 56
		TCCR0=0;
 3d0:	13 be       	out	0x33, r1	; 51

void Set_Delay (float SEC)
{
	float counter;
	SREG|=(1<<7);
	for (counter=0;counter<(4*SEC);counter++)
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e8       	ldi	r20, 0x80	; 128
 3d8:	5f e3       	ldi	r21, 0x3F	; 63
 3da:	c7 01       	movw	r24, r14
 3dc:	b6 01       	movw	r22, r12
 3de:	0e 94 8a 03 	call	0x714	; 0x714 <__addsf3>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 e8       	ldi	r20, 0x80	; 128
 3ec:	50 e4       	ldi	r21, 0x40	; 64
 3ee:	c5 01       	movw	r24, r10
 3f0:	b4 01       	movw	r22, r8
 3f2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__mulsf3>
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	c7 01       	movw	r24, r14
 3fc:	b6 01       	movw	r22, r12
 3fe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
 402:	88 23       	and	r24, r24
 404:	c4 f2       	brlt	.-80     	; 0x3b6 <Set_Delay+0x22>

		while ((TIFR&(1<<0))==0);
		TIFR|=(1<<0);
		TCCR0=0;
	}
	cli();
 406:	f8 94       	cli

}
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	bf 90       	pop	r11
 412:	af 90       	pop	r10
 414:	9f 90       	pop	r9
 416:	8f 90       	pop	r8
 418:	08 95       	ret

0000041a <Set_Delay_Timer2>:
void Set_Delay_Timer2 (float SEC)
{
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	4b 01       	movw	r8, r22
 42c:	5c 01       	movw	r10, r24
	float counter;
	SREG|=(1<<7);
 42e:	8f b7       	in	r24, 0x3f	; 63
 430:	80 68       	ori	r24, 0x80	; 128
 432:	8f bf       	out	0x3f, r24	; 63
	for (counter=0;counter<(3.9*SEC);counter++)
 434:	c1 2c       	mov	r12, r1
 436:	d1 2c       	mov	r13, r1
 438:	76 01       	movw	r14, r12
 43a:	18 c0       	rjmp	.+48     	; 0x46c <Set_Delay_Timer2+0x52>
	{
		TCNT2=0x09;  //initial value 
 43c:	89 e0       	ldi	r24, 0x09	; 9
 43e:	84 bd       	out	0x24, r24	; 36
		TIMSK|=(1<<6);  //enable (module interrupt enable)
 440:	89 b7       	in	r24, 0x39	; 57
 442:	80 64       	ori	r24, 0x40	; 64
 444:	89 bf       	out	0x39, r24	; 57
		TCCR2=(1<<7)|(1<<CS20)|(1<<CS22)|(1<<CS21);
 446:	87 e8       	ldi	r24, 0x87	; 135
 448:	85 bd       	out	0x25, r24	; 37

		while ((TIFR&(1<<6))==0);
 44a:	08 b6       	in	r0, 0x38	; 56
 44c:	06 fe       	sbrs	r0, 6
 44e:	fd cf       	rjmp	.-6      	; 0x44a <Set_Delay_Timer2+0x30>
		TIFR|=(1<<6);
 450:	88 b7       	in	r24, 0x38	; 56
 452:	80 64       	ori	r24, 0x40	; 64
 454:	88 bf       	out	0x38, r24	; 56
		TCCR0=0;
 456:	13 be       	out	0x33, r1	; 51
}
void Set_Delay_Timer2 (float SEC)
{
	float counter;
	SREG|=(1<<7);
	for (counter=0;counter<(3.9*SEC);counter++)
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	40 e8       	ldi	r20, 0x80	; 128
 45e:	5f e3       	ldi	r21, 0x3F	; 63
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	0e 94 8a 03 	call	0x714	; 0x714 <__addsf3>
 468:	6b 01       	movw	r12, r22
 46a:	7c 01       	movw	r14, r24
 46c:	2a e9       	ldi	r18, 0x9A	; 154
 46e:	39 e9       	ldi	r19, 0x99	; 153
 470:	49 e7       	ldi	r20, 0x79	; 121
 472:	50 e4       	ldi	r21, 0x40	; 64
 474:	c5 01       	movw	r24, r10
 476:	b4 01       	movw	r22, r8
 478:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__mulsf3>
 47c:	9b 01       	movw	r18, r22
 47e:	ac 01       	movw	r20, r24
 480:	c7 01       	movw	r24, r14
 482:	b6 01       	movw	r22, r12
 484:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__cmpsf2>
 488:	88 23       	and	r24, r24
 48a:	c4 f2       	brlt	.-80     	; 0x43c <Set_Delay_Timer2+0x22>

		while ((TIFR&(1<<6))==0);
		TIFR|=(1<<6);
		TCCR0=0;
	}
cli();
 48c:	f8 94       	cli
}
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	bf 90       	pop	r11
 498:	af 90       	pop	r10
 49a:	9f 90       	pop	r9
 49c:	8f 90       	pop	r8
 49e:	08 95       	ret

000004a0 <main>:
#include <avr/io.h>


int main(void)
{
    app_start();
 4a0:	0e 94 df 00 	call	0x1be	; 0x1be <app_start>
}
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	08 95       	ret

000004aa <GPIO_InitPin>:
		break;

	}
	return ret_val;

}
 4aa:	84 30       	cpi	r24, 0x04	; 4
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <GPIO_InitPin+0x6>
 4ae:	72 c0       	rjmp	.+228    	; 0x594 <GPIO_InitPin+0xea>
 4b0:	68 30       	cpi	r22, 0x08	; 8
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <GPIO_InitPin+0xc>
 4b4:	6f c0       	rjmp	.+222    	; 0x594 <GPIO_InitPin+0xea>
 4b6:	42 30       	cpi	r20, 0x02	; 2
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <GPIO_InitPin+0x12>
 4ba:	6c c0       	rjmp	.+216    	; 0x594 <GPIO_InitPin+0xea>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	01 f1       	breq	.+64     	; 0x500 <GPIO_InitPin+0x56>
 4c0:	30 f0       	brcs	.+12     	; 0x4ce <GPIO_InitPin+0x24>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	b1 f1       	breq	.+108    	; 0x532 <GPIO_InitPin+0x88>
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	09 f4       	brne	.+2      	; 0x4cc <GPIO_InitPin+0x22>
 4ca:	4c c0       	rjmp	.+152    	; 0x564 <GPIO_InitPin+0xba>
 4cc:	63 c0       	rjmp	.+198    	; 0x594 <GPIO_InitPin+0xea>
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	59 f4       	brne	.+22     	; 0x4e8 <GPIO_InitPin+0x3e>
 4d2:	2a b3       	in	r18, 0x1a	; 26
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <GPIO_InitPin+0x34>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <GPIO_InitPin+0x30>
 4e2:	82 2b       	or	r24, r18
 4e4:	8a bb       	out	0x1a, r24	; 26
 4e6:	56 c0       	rjmp	.+172    	; 0x594 <GPIO_InitPin+0xea>
 4e8:	2a b3       	in	r18, 0x1a	; 26
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <GPIO_InitPin+0x4a>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <GPIO_InitPin+0x46>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	8a bb       	out	0x1a, r24	; 26
 4fe:	4a c0       	rjmp	.+148    	; 0x594 <GPIO_InitPin+0xea>
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	59 f4       	brne	.+22     	; 0x51a <GPIO_InitPin+0x70>
 504:	27 b3       	in	r18, 0x17	; 23
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <GPIO_InitPin+0x66>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <GPIO_InitPin+0x62>
 514:	82 2b       	or	r24, r18
 516:	87 bb       	out	0x17, r24	; 23
 518:	3d c0       	rjmp	.+122    	; 0x594 <GPIO_InitPin+0xea>
 51a:	27 b3       	in	r18, 0x17	; 23
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <GPIO_InitPin+0x7c>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <GPIO_InitPin+0x78>
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	87 bb       	out	0x17, r24	; 23
 530:	31 c0       	rjmp	.+98     	; 0x594 <GPIO_InitPin+0xea>
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	59 f4       	brne	.+22     	; 0x54c <GPIO_InitPin+0xa2>
 536:	24 b3       	in	r18, 0x14	; 20
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <GPIO_InitPin+0x98>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <GPIO_InitPin+0x94>
 546:	82 2b       	or	r24, r18
 548:	84 bb       	out	0x14, r24	; 20
 54a:	24 c0       	rjmp	.+72     	; 0x594 <GPIO_InitPin+0xea>
 54c:	24 b3       	in	r18, 0x14	; 20
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <GPIO_InitPin+0xae>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <GPIO_InitPin+0xaa>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	84 bb       	out	0x14, r24	; 20
 562:	18 c0       	rjmp	.+48     	; 0x594 <GPIO_InitPin+0xea>
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	59 f4       	brne	.+22     	; 0x57e <GPIO_InitPin+0xd4>
 568:	21 b3       	in	r18, 0x11	; 17
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <GPIO_InitPin+0xca>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <GPIO_InitPin+0xc6>
 578:	82 2b       	or	r24, r18
 57a:	81 bb       	out	0x11, r24	; 17
 57c:	0b c0       	rjmp	.+22     	; 0x594 <GPIO_InitPin+0xea>
 57e:	21 b3       	in	r18, 0x11	; 17
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_InitPin+0xe0>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_InitPin+0xdc>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	81 bb       	out	0x11, r24	; 17
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret

00000598 <GPIO_WritePin>:
 598:	84 30       	cpi	r24, 0x04	; 4
 59a:	08 f0       	brcs	.+2      	; 0x59e <GPIO_WritePin+0x6>
 59c:	72 c0       	rjmp	.+228    	; 0x682 <GPIO_WritePin+0xea>
 59e:	68 30       	cpi	r22, 0x08	; 8
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <GPIO_WritePin+0xc>
 5a2:	6f c0       	rjmp	.+222    	; 0x682 <GPIO_WritePin+0xea>
 5a4:	42 30       	cpi	r20, 0x02	; 2
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <GPIO_WritePin+0x12>
 5a8:	6c c0       	rjmp	.+216    	; 0x682 <GPIO_WritePin+0xea>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	01 f1       	breq	.+64     	; 0x5ee <GPIO_WritePin+0x56>
 5ae:	30 f0       	brcs	.+12     	; 0x5bc <GPIO_WritePin+0x24>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	b1 f1       	breq	.+108    	; 0x620 <GPIO_WritePin+0x88>
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	09 f4       	brne	.+2      	; 0x5ba <GPIO_WritePin+0x22>
 5b8:	4c c0       	rjmp	.+152    	; 0x652 <GPIO_WritePin+0xba>
 5ba:	63 c0       	rjmp	.+198    	; 0x682 <GPIO_WritePin+0xea>
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	59 f4       	brne	.+22     	; 0x5d6 <GPIO_WritePin+0x3e>
 5c0:	2b b3       	in	r18, 0x1b	; 27
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <GPIO_WritePin+0x34>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <GPIO_WritePin+0x30>
 5d0:	82 2b       	or	r24, r18
 5d2:	8b bb       	out	0x1b, r24	; 27
 5d4:	56 c0       	rjmp	.+172    	; 0x682 <GPIO_WritePin+0xea>
 5d6:	2b b3       	in	r18, 0x1b	; 27
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_WritePin+0x4a>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_WritePin+0x46>
 5e6:	80 95       	com	r24
 5e8:	82 23       	and	r24, r18
 5ea:	8b bb       	out	0x1b, r24	; 27
 5ec:	4a c0       	rjmp	.+148    	; 0x682 <GPIO_WritePin+0xea>
 5ee:	41 30       	cpi	r20, 0x01	; 1
 5f0:	59 f4       	brne	.+22     	; 0x608 <GPIO_WritePin+0x70>
 5f2:	28 b3       	in	r18, 0x18	; 24
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <GPIO_WritePin+0x66>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <GPIO_WritePin+0x62>
 602:	82 2b       	or	r24, r18
 604:	88 bb       	out	0x18, r24	; 24
 606:	3d c0       	rjmp	.+122    	; 0x682 <GPIO_WritePin+0xea>
 608:	28 b3       	in	r18, 0x18	; 24
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <GPIO_WritePin+0x7c>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <GPIO_WritePin+0x78>
 618:	80 95       	com	r24
 61a:	82 23       	and	r24, r18
 61c:	88 bb       	out	0x18, r24	; 24
 61e:	31 c0       	rjmp	.+98     	; 0x682 <GPIO_WritePin+0xea>
 620:	41 30       	cpi	r20, 0x01	; 1
 622:	59 f4       	brne	.+22     	; 0x63a <GPIO_WritePin+0xa2>
 624:	25 b3       	in	r18, 0x15	; 21
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <GPIO_WritePin+0x98>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <GPIO_WritePin+0x94>
 634:	82 2b       	or	r24, r18
 636:	85 bb       	out	0x15, r24	; 21
 638:	24 c0       	rjmp	.+72     	; 0x682 <GPIO_WritePin+0xea>
 63a:	25 b3       	in	r18, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <GPIO_WritePin+0xae>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <GPIO_WritePin+0xaa>
 64a:	80 95       	com	r24
 64c:	82 23       	and	r24, r18
 64e:	85 bb       	out	0x15, r24	; 21
 650:	18 c0       	rjmp	.+48     	; 0x682 <GPIO_WritePin+0xea>
 652:	41 30       	cpi	r20, 0x01	; 1
 654:	59 f4       	brne	.+22     	; 0x66c <GPIO_WritePin+0xd4>
 656:	22 b3       	in	r18, 0x12	; 18
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <GPIO_WritePin+0xca>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <GPIO_WritePin+0xc6>
 666:	82 2b       	or	r24, r18
 668:	82 bb       	out	0x12, r24	; 18
 66a:	0b c0       	rjmp	.+22     	; 0x682 <GPIO_WritePin+0xea>
 66c:	22 b3       	in	r18, 0x12	; 18
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <GPIO_WritePin+0xe0>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <GPIO_WritePin+0xdc>
 67c:	80 95       	com	r24
 67e:	82 23       	and	r24, r18
 680:	82 bb       	out	0x12, r24	; 18
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret

00000686 <GPIO_TogglePin>:
	uint8 ret_val=Success;
	if (pin>7||port>3)
	{
		ret_val=Error_Fail;
	}
	switch (port)
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	89 f0       	breq	.+34     	; 0x6ac <GPIO_TogglePin+0x26>
 68a:	28 f0       	brcs	.+10     	; 0x696 <GPIO_TogglePin+0x10>
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	c9 f0       	breq	.+50     	; 0x6c2 <GPIO_TogglePin+0x3c>
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	11 f1       	breq	.+68     	; 0x6d8 <GPIO_TogglePin+0x52>
 694:	08 95       	ret
	{
	case GPIO_A:
		TOGGLE_BIT(PORTA,pin);
 696:	2b b3       	in	r18, 0x1b	; 27
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <GPIO_TogglePin+0x1c>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <GPIO_TogglePin+0x18>
 6a6:	82 27       	eor	r24, r18
 6a8:	8b bb       	out	0x1b, r24	; 27
		break;
 6aa:	08 95       	ret
	case GPIO_B:
		TOGGLE_BIT(PORTB,pin);
 6ac:	28 b3       	in	r18, 0x18	; 24
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <GPIO_TogglePin+0x32>
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <GPIO_TogglePin+0x2e>
 6bc:	82 27       	eor	r24, r18
 6be:	88 bb       	out	0x18, r24	; 24
		break;
 6c0:	08 95       	ret
	case GPIO_C:
		TOGGLE_BIT(PORTC,pin);
 6c2:	25 b3       	in	r18, 0x15	; 21
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <GPIO_TogglePin+0x48>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <GPIO_TogglePin+0x44>
 6d2:	82 27       	eor	r24, r18
 6d4:	85 bb       	out	0x15, r24	; 21
		break;
 6d6:	08 95       	ret
	case GPIO_D:
		TOGGLE_BIT(PORTD,pin);
 6d8:	22 b3       	in	r18, 0x12	; 18
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <GPIO_TogglePin+0x5e>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <GPIO_TogglePin+0x5a>
 6e8:	82 27       	eor	r24, r18
 6ea:	82 bb       	out	0x12, r24	; 18
		break;


	}
}
 6ec:	08 95       	ret

000006ee <Init_interrupt>:
#include "../Utilities/standard2.h"


void Init_interrupt (uint8 Interrupt_num)
{
	switch (Interrupt_num)
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	41 f0       	breq	.+16     	; 0x702 <Init_interrupt+0x14>
 6f2:	18 f0       	brcs	.+6      	; 0x6fa <Init_interrupt+0xc>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	49 f0       	breq	.+18     	; 0x70a <Init_interrupt+0x1c>
 6f8:	08 95       	ret
	{
	case Int0:
		SET_BIT(GICR,6);
 6fa:	8b b7       	in	r24, 0x3b	; 59
 6fc:	80 64       	ori	r24, 0x40	; 64
 6fe:	8b bf       	out	0x3b, r24	; 59
		break;
 700:	08 95       	ret
	case Int1:
		SET_BIT(GICR,7);
 702:	8b b7       	in	r24, 0x3b	; 59
 704:	80 68       	ori	r24, 0x80	; 128
 706:	8b bf       	out	0x3b, r24	; 59
		break;
 708:	08 95       	ret
	case Int2:
		SET_BIT(GICR,5);
 70a:	8b b7       	in	r24, 0x3b	; 59
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	8b bf       	out	0x3b, r24	; 59
 710:	08 95       	ret

00000712 <__subsf3>:
 712:	50 58       	subi	r21, 0x80	; 128

00000714 <__addsf3>:
 714:	bb 27       	eor	r27, r27
 716:	aa 27       	eor	r26, r26
 718:	0e 94 a1 03 	call	0x742	; 0x742 <__addsf3x>
 71c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_round>
 720:	0e 94 28 04 	call	0x850	; 0x850 <__fp_pscA>
 724:	38 f0       	brcs	.+14     	; 0x734 <__addsf3+0x20>
 726:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscB>
 72a:	20 f0       	brcs	.+8      	; 0x734 <__addsf3+0x20>
 72c:	39 f4       	brne	.+14     	; 0x73c <__addsf3+0x28>
 72e:	9f 3f       	cpi	r25, 0xFF	; 255
 730:	19 f4       	brne	.+6      	; 0x738 <__addsf3+0x24>
 732:	26 f4       	brtc	.+8      	; 0x73c <__addsf3+0x28>
 734:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_nan>
 738:	0e f4       	brtc	.+2      	; 0x73c <__addsf3+0x28>
 73a:	e0 95       	com	r30
 73c:	e7 fb       	bst	r30, 7
 73e:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_inf>

00000742 <__addsf3x>:
 742:	e9 2f       	mov	r30, r25
 744:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_split3>
 748:	58 f3       	brcs	.-42     	; 0x720 <__addsf3+0xc>
 74a:	ba 17       	cp	r27, r26
 74c:	62 07       	cpc	r22, r18
 74e:	73 07       	cpc	r23, r19
 750:	84 07       	cpc	r24, r20
 752:	95 07       	cpc	r25, r21
 754:	20 f0       	brcs	.+8      	; 0x75e <__addsf3x+0x1c>
 756:	79 f4       	brne	.+30     	; 0x776 <__addsf3x+0x34>
 758:	a6 f5       	brtc	.+104    	; 0x7c2 <__addsf3x+0x80>
 75a:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_zero>
 75e:	0e f4       	brtc	.+2      	; 0x762 <__addsf3x+0x20>
 760:	e0 95       	com	r30
 762:	0b 2e       	mov	r0, r27
 764:	ba 2f       	mov	r27, r26
 766:	a0 2d       	mov	r26, r0
 768:	0b 01       	movw	r0, r22
 76a:	b9 01       	movw	r22, r18
 76c:	90 01       	movw	r18, r0
 76e:	0c 01       	movw	r0, r24
 770:	ca 01       	movw	r24, r20
 772:	a0 01       	movw	r20, r0
 774:	11 24       	eor	r1, r1
 776:	ff 27       	eor	r31, r31
 778:	59 1b       	sub	r21, r25
 77a:	99 f0       	breq	.+38     	; 0x7a2 <__addsf3x+0x60>
 77c:	59 3f       	cpi	r21, 0xF9	; 249
 77e:	50 f4       	brcc	.+20     	; 0x794 <__addsf3x+0x52>
 780:	50 3e       	cpi	r21, 0xE0	; 224
 782:	68 f1       	brcs	.+90     	; 0x7de <__addsf3x+0x9c>
 784:	1a 16       	cp	r1, r26
 786:	f0 40       	sbci	r31, 0x00	; 0
 788:	a2 2f       	mov	r26, r18
 78a:	23 2f       	mov	r18, r19
 78c:	34 2f       	mov	r19, r20
 78e:	44 27       	eor	r20, r20
 790:	58 5f       	subi	r21, 0xF8	; 248
 792:	f3 cf       	rjmp	.-26     	; 0x77a <__addsf3x+0x38>
 794:	46 95       	lsr	r20
 796:	37 95       	ror	r19
 798:	27 95       	ror	r18
 79a:	a7 95       	ror	r26
 79c:	f0 40       	sbci	r31, 0x00	; 0
 79e:	53 95       	inc	r21
 7a0:	c9 f7       	brne	.-14     	; 0x794 <__addsf3x+0x52>
 7a2:	7e f4       	brtc	.+30     	; 0x7c2 <__addsf3x+0x80>
 7a4:	1f 16       	cp	r1, r31
 7a6:	ba 0b       	sbc	r27, r26
 7a8:	62 0b       	sbc	r22, r18
 7aa:	73 0b       	sbc	r23, r19
 7ac:	84 0b       	sbc	r24, r20
 7ae:	ba f0       	brmi	.+46     	; 0x7de <__addsf3x+0x9c>
 7b0:	91 50       	subi	r25, 0x01	; 1
 7b2:	a1 f0       	breq	.+40     	; 0x7dc <__addsf3x+0x9a>
 7b4:	ff 0f       	add	r31, r31
 7b6:	bb 1f       	adc	r27, r27
 7b8:	66 1f       	adc	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	c2 f7       	brpl	.-16     	; 0x7b0 <__addsf3x+0x6e>
 7c0:	0e c0       	rjmp	.+28     	; 0x7de <__addsf3x+0x9c>
 7c2:	ba 0f       	add	r27, r26
 7c4:	62 1f       	adc	r22, r18
 7c6:	73 1f       	adc	r23, r19
 7c8:	84 1f       	adc	r24, r20
 7ca:	48 f4       	brcc	.+18     	; 0x7de <__addsf3x+0x9c>
 7cc:	87 95       	ror	r24
 7ce:	77 95       	ror	r23
 7d0:	67 95       	ror	r22
 7d2:	b7 95       	ror	r27
 7d4:	f7 95       	ror	r31
 7d6:	9e 3f       	cpi	r25, 0xFE	; 254
 7d8:	08 f0       	brcs	.+2      	; 0x7dc <__addsf3x+0x9a>
 7da:	b0 cf       	rjmp	.-160    	; 0x73c <__addsf3+0x28>
 7dc:	93 95       	inc	r25
 7de:	88 0f       	add	r24, r24
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <__addsf3x+0xa2>
 7e2:	99 27       	eor	r25, r25
 7e4:	ee 0f       	add	r30, r30
 7e6:	97 95       	ror	r25
 7e8:	87 95       	ror	r24
 7ea:	08 95       	ret

000007ec <__cmpsf2>:
 7ec:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_cmp>
 7f0:	08 f4       	brcc	.+2      	; 0x7f4 <__cmpsf2+0x8>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	08 95       	ret

000007f6 <__fp_cmp>:
 7f6:	99 0f       	add	r25, r25
 7f8:	00 08       	sbc	r0, r0
 7fa:	55 0f       	add	r21, r21
 7fc:	aa 0b       	sbc	r26, r26
 7fe:	e0 e8       	ldi	r30, 0x80	; 128
 800:	fe ef       	ldi	r31, 0xFE	; 254
 802:	16 16       	cp	r1, r22
 804:	17 06       	cpc	r1, r23
 806:	e8 07       	cpc	r30, r24
 808:	f9 07       	cpc	r31, r25
 80a:	c0 f0       	brcs	.+48     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 80c:	12 16       	cp	r1, r18
 80e:	13 06       	cpc	r1, r19
 810:	e4 07       	cpc	r30, r20
 812:	f5 07       	cpc	r31, r21
 814:	98 f0       	brcs	.+38     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 816:	62 1b       	sub	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	95 0b       	sbc	r25, r21
 81e:	39 f4       	brne	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 820:	0a 26       	eor	r0, r26
 822:	61 f0       	breq	.+24     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 824:	23 2b       	or	r18, r19
 826:	24 2b       	or	r18, r20
 828:	25 2b       	or	r18, r21
 82a:	21 f4       	brne	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82c:	08 95       	ret
 82e:	0a 26       	eor	r0, r26
 830:	09 f4       	brne	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	a1 40       	sbci	r26, 0x01	; 1
 834:	a6 95       	lsr	r26
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	81 1d       	adc	r24, r1
 83a:	81 1d       	adc	r24, r1
 83c:	08 95       	ret

0000083e <__fp_inf>:
 83e:	97 f9       	bld	r25, 7
 840:	9f 67       	ori	r25, 0x7F	; 127
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	08 95       	ret

0000084a <__fp_nan>:
 84a:	9f ef       	ldi	r25, 0xFF	; 255
 84c:	80 ec       	ldi	r24, 0xC0	; 192
 84e:	08 95       	ret

00000850 <__fp_pscA>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	09 06       	cpc	r0, r25
 85c:	08 95       	ret

0000085e <__fp_pscB>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	12 16       	cp	r1, r18
 864:	13 06       	cpc	r1, r19
 866:	14 06       	cpc	r1, r20
 868:	05 06       	cpc	r0, r21
 86a:	08 95       	ret

0000086c <__fp_round>:
 86c:	09 2e       	mov	r0, r25
 86e:	03 94       	inc	r0
 870:	00 0c       	add	r0, r0
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_round+0xc>
 874:	88 23       	and	r24, r24
 876:	52 f0       	brmi	.+20     	; 0x88c <__fp_round+0x20>
 878:	bb 0f       	add	r27, r27
 87a:	40 f4       	brcc	.+16     	; 0x88c <__fp_round+0x20>
 87c:	bf 2b       	or	r27, r31
 87e:	11 f4       	brne	.+4      	; 0x884 <__fp_round+0x18>
 880:	60 ff       	sbrs	r22, 0
 882:	04 c0       	rjmp	.+8      	; 0x88c <__fp_round+0x20>
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__fp_split3>:
 88e:	57 fd       	sbrc	r21, 7
 890:	90 58       	subi	r25, 0x80	; 128
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	59 f0       	breq	.+22     	; 0x8ae <__fp_splitA+0x10>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__fp_splitA+0x1a>
 89c:	47 95       	ror	r20

0000089e <__fp_splitA>:
 89e:	88 0f       	add	r24, r24
 8a0:	97 fb       	bst	r25, 7
 8a2:	99 1f       	adc	r25, r25
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_splitA+0x20>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	79 f0       	breq	.+30     	; 0x8c8 <__fp_splitA+0x2a>
 8aa:	87 95       	ror	r24
 8ac:	08 95       	ret
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	55 1f       	adc	r21, r21
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <__fp_split3+0xe>
 8b8:	46 95       	lsr	r20
 8ba:	f1 df       	rcall	.-30     	; 0x89e <__fp_splitA>
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__fp_splitA+0x30>
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	f1 cf       	rjmp	.-30     	; 0x8aa <__fp_splitA+0xc>
 8c8:	86 95       	lsr	r24
 8ca:	71 05       	cpc	r23, r1
 8cc:	61 05       	cpc	r22, r1
 8ce:	08 94       	sec
 8d0:	08 95       	ret

000008d2 <__fp_zero>:
 8d2:	e8 94       	clt

000008d4 <__fp_szero>:
 8d4:	bb 27       	eor	r27, r27
 8d6:	66 27       	eor	r22, r22
 8d8:	77 27       	eor	r23, r23
 8da:	cb 01       	movw	r24, r22
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__mulsf3>:
 8e0:	0e 94 83 04 	call	0x906	; 0x906 <__mulsf3x>
 8e4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_round>
 8e8:	0e 94 28 04 	call	0x850	; 0x850 <__fp_pscA>
 8ec:	38 f0       	brcs	.+14     	; 0x8fc <__mulsf3+0x1c>
 8ee:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscB>
 8f2:	20 f0       	brcs	.+8      	; 0x8fc <__mulsf3+0x1c>
 8f4:	95 23       	and	r25, r21
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__mulsf3+0x1c>
 8f8:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_inf>
 8fc:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_nan>
 900:	11 24       	eor	r1, r1
 902:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_szero>

00000906 <__mulsf3x>:
 906:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_split3>
 90a:	70 f3       	brcs	.-36     	; 0x8e8 <__mulsf3+0x8>

0000090c <__mulsf3_pse>:
 90c:	95 9f       	mul	r25, r21
 90e:	c1 f3       	breq	.-16     	; 0x900 <__mulsf3+0x20>
 910:	95 0f       	add	r25, r21
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	55 1f       	adc	r21, r21
 916:	62 9f       	mul	r22, r18
 918:	f0 01       	movw	r30, r0
 91a:	72 9f       	mul	r23, r18
 91c:	bb 27       	eor	r27, r27
 91e:	f0 0d       	add	r31, r0
 920:	b1 1d       	adc	r27, r1
 922:	63 9f       	mul	r22, r19
 924:	aa 27       	eor	r26, r26
 926:	f0 0d       	add	r31, r0
 928:	b1 1d       	adc	r27, r1
 92a:	aa 1f       	adc	r26, r26
 92c:	64 9f       	mul	r22, r20
 92e:	66 27       	eor	r22, r22
 930:	b0 0d       	add	r27, r0
 932:	a1 1d       	adc	r26, r1
 934:	66 1f       	adc	r22, r22
 936:	82 9f       	mul	r24, r18
 938:	22 27       	eor	r18, r18
 93a:	b0 0d       	add	r27, r0
 93c:	a1 1d       	adc	r26, r1
 93e:	62 1f       	adc	r22, r18
 940:	73 9f       	mul	r23, r19
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	62 1f       	adc	r22, r18
 948:	83 9f       	mul	r24, r19
 94a:	a0 0d       	add	r26, r0
 94c:	61 1d       	adc	r22, r1
 94e:	22 1f       	adc	r18, r18
 950:	74 9f       	mul	r23, r20
 952:	33 27       	eor	r19, r19
 954:	a0 0d       	add	r26, r0
 956:	61 1d       	adc	r22, r1
 958:	23 1f       	adc	r18, r19
 95a:	84 9f       	mul	r24, r20
 95c:	60 0d       	add	r22, r0
 95e:	21 1d       	adc	r18, r1
 960:	82 2f       	mov	r24, r18
 962:	76 2f       	mov	r23, r22
 964:	6a 2f       	mov	r22, r26
 966:	11 24       	eor	r1, r1
 968:	9f 57       	subi	r25, 0x7F	; 127
 96a:	50 40       	sbci	r21, 0x00	; 0
 96c:	9a f0       	brmi	.+38     	; 0x994 <__mulsf3_pse+0x88>
 96e:	f1 f0       	breq	.+60     	; 0x9ac <__mulsf3_pse+0xa0>
 970:	88 23       	and	r24, r24
 972:	4a f0       	brmi	.+18     	; 0x986 <__mulsf3_pse+0x7a>
 974:	ee 0f       	add	r30, r30
 976:	ff 1f       	adc	r31, r31
 978:	bb 1f       	adc	r27, r27
 97a:	66 1f       	adc	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	91 50       	subi	r25, 0x01	; 1
 982:	50 40       	sbci	r21, 0x00	; 0
 984:	a9 f7       	brne	.-22     	; 0x970 <__mulsf3_pse+0x64>
 986:	9e 3f       	cpi	r25, 0xFE	; 254
 988:	51 05       	cpc	r21, r1
 98a:	80 f0       	brcs	.+32     	; 0x9ac <__mulsf3_pse+0xa0>
 98c:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_inf>
 990:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_szero>
 994:	5f 3f       	cpi	r21, 0xFF	; 255
 996:	e4 f3       	brlt	.-8      	; 0x990 <__mulsf3_pse+0x84>
 998:	98 3e       	cpi	r25, 0xE8	; 232
 99a:	d4 f3       	brlt	.-12     	; 0x990 <__mulsf3_pse+0x84>
 99c:	86 95       	lsr	r24
 99e:	77 95       	ror	r23
 9a0:	67 95       	ror	r22
 9a2:	b7 95       	ror	r27
 9a4:	f7 95       	ror	r31
 9a6:	e7 95       	ror	r30
 9a8:	9f 5f       	subi	r25, 0xFF	; 255
 9aa:	c1 f7       	brne	.-16     	; 0x99c <__mulsf3_pse+0x90>
 9ac:	fe 2b       	or	r31, r30
 9ae:	88 0f       	add	r24, r24
 9b0:	91 1d       	adc	r25, r1
 9b2:	96 95       	lsr	r25
 9b4:	87 95       	ror	r24
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
